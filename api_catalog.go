/*
 * Open Service Broker API
 *
 * The Open Service Broker API defines an HTTP(S) interface between Platforms and Service Brokers.
 *
 * API version: master - might contain changes that are not yet released
 * Contact: open-service-broker-api@googlegroups.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"fmt"
	"log"
	"net/http"

	openapi "github.com/openservicebrokerapi/osb-checker/autogenerated/models"
	"github.com/openservicebrokerapi/osb-checker/mockbroker/store"
)

var emptyBody = make(map[string]interface{})

func handleError(w http.ResponseWriter, code int, errMsg, desp string) {
	output, _ := json.Marshal(&openapi.Error{
		Error:       errMsg,
		Description: desp,
	})

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(code)
	w.Write(output)
}

func handleResult(w http.ResponseWriter, code int, result interface{}) {
	output, _ := json.Marshal(result)

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(code)
	w.Write(output)
}

// checkRequestHeader will check if version is supported by service broker,
// and also verify the authentication info. If anything goes wrong, this
// method would return false flag and handle function.
func checkRequestHeader(w http.ResponseWriter, r *http.Request) (
	bool, func(http.ResponseWriter)) {
	// check if the version is 2.14
	if apiV := r.Header.Get("X-Broker-API-Version"); apiV != "2.14" {
		return false, func(w http.ResponseWriter) {
			errMsg := fmt.Sprintf("X-Broker-API-Version expected 2.14, got %s", apiV)
			log.Println(errMsg)
			handleError(w, 412, "Precondition Failed", errMsg)
		}
	}
	// check the authentication
	username, password, ok := r.BasicAuth()
	if !ok || username != "username" || password != "password" {
		return false, func(w http.ResponseWriter) {
			errMsg := fmt.Sprint("username or password not correct")
			log.Println(errMsg)
			handleError(w, 401, "Unauthorized", errMsg)
		}
	}

	return true, nil
}

// CatalogGet - get the catalog of services that the service broker offers
func CatalogGet(w http.ResponseWriter, r *http.Request) {
	// check if request header is validated
	flag, errFunc := checkRequestHeader(w, r)
	if !flag {
		errFunc(w)
		return
	}

	handleResult(w, 200, store.GetCatalogPayload())
	return
}
